<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking and the Internet</title>
    <link>https://tntech-ngin.github.io/csc4200/</link>
    <description>Recent content on Networking and the Internet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://tntech-ngin.github.io/csc4200/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Course Material</title>
      <link>https://tntech-ngin.github.io/csc4200/material/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tntech-ngin.github.io/csc4200/material/</guid>
      <description>Textbook We will be using the following book. It is open source and you can use the PDF or the HTML version.  Title: Computer Networks: A Systems Approach Authors: Larry Peterson and Bruce Davie Copyright: Elsevier, 2012 Source: https://github.com/SystemsApproach License: CC BY 4.0  Socket Programming Book, C/C++ - Use Beej&amp;rsquo;s Guide to Network Programming for socket programming introduction.   Socket Programming, Python - Use this link  Grading criteria:  All Homeworks combined - 15% Programming Assignments - 35% Exams - 35% Class participation - 15%    Final grade will depend on relative distribution of scores.</description>
    </item>
    
    <item>
      <title>Create your own content delivery network</title>
      <link>https://tntech-ngin.github.io/csc4200/programming3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tntech-ngin.github.io/csc4200/programming3/</guid>
      <description>Due Date - November 27, 2020, 10PM CST  Objectives
   Learn to break down a very complex problem into smaller problems
  Solve each smaller problem and bring them together to solve the larger problem
  Learn how CDNs work and build your own CDN
   Overview
 In this project, you are going to build on the first and the second project. You will build your own &amp;ldquo;CDN load-balancer&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Programming Assignment</title>
      <link>https://tntech-ngin.github.io/csc4200/programming1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tntech-ngin.github.io/csc4200/programming1/</guid>
      <description>Due Date - Feb 21, 2021  Objectives
   Learn to create network packets.
  Learn how packets can be sent over the network.
  Familiarize you with the concept of sockets.
  Learn packing structures, endianness, unpacking, and interpreting network data.
  Learn how to use actual data from a packet.
  Use packet capture to visually inspect protocols.
   Overview</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>https://tntech-ngin.github.io/csc4200/syllabus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tntech-ngin.github.io/csc4200/syllabus/</guid>
      <description>This is a tentative schedule and will change.
 Week 1 -
 January 20 - Introduction Slides, Recording January 22 - Introduction - Terminologies, Circuit vs Packet Switching, Layers, Architectures vs Protocols Slides, Recording   - Reading assignment for week 1 - Introduction, Chapter 1.2, and Chapter 1.3   Jan 25th - Last day to drop class
 Week 2 -
 January 25 - Network Performance, Bandwidth/Delay, Jitter Slides, Recording   - Reading assignement Reading - Chapter 1.</description>
    </item>
    
    <item>
      <title>To the Cloud and Back</title>
      <link>https://tntech-ngin.github.io/csc4200/programming2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tntech-ngin.github.io/csc4200/programming2/</guid>
      <description>Due Date - March 31, 2021, 10PM CST  Objectives
 In this project, you are going to build on the first project. You will have a server in the cloud that downloads and saves a web page in memory. You will then have clients connect to the server and retrives this content. This is the overly simplified idea behind a WEB PROXY. The client and server communications MUST use UDP (SOCK_DGRAM) and NOT TCP.</description>
    </item>
    
  </channel>
</rss>
